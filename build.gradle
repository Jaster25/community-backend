plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'com.github.dawnwords.jacoco.badge' version '0.2.4'
}

group = 'com.jaster25'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	/**
	 * Spring Boot
	 * */
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	// Jasypt
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'

	/**
	 * Spring Security
	 */
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	/**
	 * Database
	 * */
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// H2
	runtimeOnly 'com.h2database:h2'
	// MySQL
	runtimeOnly 'mysql:mysql-connector-java'

	/**
	 * Spring Cloud
	 */
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'
}

// Jacoco
jacoco {
	toolVersion = '0.8.7'
}

test {
	useJUnitPlatform()
	finalizedBy("jacocoTestReport")
}

jacocoTestReport {
	dependsOn test
	reports {
		html.enabled true
		csv.enabled true
		xml.enabled true
//		html.destination file("src/jacoco/jacoco.html")
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/CommunityBackendApplication*',
							'**/dto/*',
							'**/domain/*/domain/**',
							'**/AuthService*',
							'**/global/**',
					])
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = "CLASS"
			enabled = true

			// 브랜치 커버리지를 최소한 90% 만족시켜야 합니다.
			limit {
				counter = "BRANCH"
				value = "COVEREDRATIO"
				minimum = 0.90
			}

			// 라인 커버리지를 최소한 60% 만족시켜야 합니다.
			limit {
				counter = "LINE"
				value = "COVEREDRATIO"
				minimum = 0.60
			}

			excludes = [
					'**.CommunityBackendApplication*',
					'**.dto.*',
					'**.domain.*.domain.**',
					'**.AuthService*',
					'**.global.**',
			]
		}
	}
}

jacocoBadgeGenSetting {
	jacocoReportPath  "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
	readmePath "$projectDir/README.md"
	// since v0.2.0, percentage limitation (0-100) for different type of coverage
	limit = ['instruction': 0, 'branch': 0, 'line': 0, 'method': 0, 'class': 0]
}
